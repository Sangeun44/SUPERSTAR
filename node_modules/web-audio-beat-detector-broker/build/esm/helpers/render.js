import { OfflineAudioContext } from 'standardized-audio-context';
export var render = function (audioBuffer, offset, duration) {
    var offlineAudioContext = new OfflineAudioContext(audioBuffer.numberOfChannels, duration * audioBuffer.sampleRate, audioBuffer.sampleRate);
    var biquadFilter = offlineAudioContext.createBiquadFilter();
    var bufferSourceNode = offlineAudioContext.createBufferSource();
    biquadFilter.frequency.value = 240;
    biquadFilter.type = 'lowpass';
    bufferSourceNode.buffer = audioBuffer;
    bufferSourceNode
        .connect(biquadFilter)
        .connect(offlineAudioContext.destination);
    bufferSourceNode.start(0, offset, duration);
    return offlineAudioContext
        .startRendering()
        .then(function (renderedBuffer) {
        var channelData = renderedBuffer.getChannelData(0);
        var sampleRate = renderedBuffer.sampleRate;
        return { channelData: channelData, sampleRate: sampleRate };
    });
};
//# sourceMappingURL=/build/es2015/helpers/render.js.map