import { countIntervalsBetweenNearbyPeaks } from './count-intervals-between-nearby-peaks';
import { getMaximumValue } from './get-maximum-value';
import { getPeaksAtThreshold } from './get-peaks-at-threshold';
import { groupNeighborsByTempo } from './group-neighbors-by-tempo';
var MINUMUM_NUMBER_OF_PEAKS = 30;
export var computeTempoBuckets = function (channelData, sampleRate) {
    var maximumValue = getMaximumValue(channelData);
    var minimumThreshold = maximumValue * 0.3;
    var peaks = [];
    var threshold = maximumValue - (maximumValue * 0.05);
    if (maximumValue > 0.25) {
        while (peaks.length < MINUMUM_NUMBER_OF_PEAKS && threshold >= minimumThreshold) {
            peaks = getPeaksAtThreshold(channelData, threshold, sampleRate);
            threshold -= maximumValue * 0.05;
        }
    }
    var intervalBuckets = countIntervalsBetweenNearbyPeaks(peaks);
    var tempoBuckets = groupNeighborsByTempo(intervalBuckets, sampleRate);
    tempoBuckets.sort(function (a, b) { return b.score - a.score; });
    return tempoBuckets;
};
//# sourceMappingURL=/build/es2015/helpers/compute-tempo-buckets.js.map